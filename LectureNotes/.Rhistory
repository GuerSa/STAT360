class(tree) <- c("tree",class(tree))
return(tree)
}
recpart_recursive <- function(node) {
R <- node$data
# stop recursion if region has a single data point
if(length(R$y) == 1) { return(node) } # NB: was return(NULL)
# else find a split that minimizes a LOF criterion
# Initialize
lof_best  <- Inf
# Loop over variables and splits
for(v in 1:ncol(R$x)){
tt <- split_points(R$x[,v]) # Exercise: write split_points()
for(t in tt) {
gdat <- data.frame(y=R$y,x=as.numeric(R$x[,v] <= t))
lof <- LOF(y~.,gdat) # Exercise: write LOF()
if(lof < lof_best) {
lof_best <- lof
childRs <- split(R,xvar=v,spt=t) # Exercises: write split.region()
}
}
}
# Call self on best split
node$childl <- recpart_recursive(new_node(childRs$Rl))
node$childr <- recpart_recursive(new_node(childRs$Rr))
return(node)
}
# Exercises
## 1.
split_points <- function(x) {
x <- sort(unique(x))
x <- x[-length(x)]
return(x)
}
testx <- c(2,4,2,3,7,7,5,5,8)
split_points(testx)
## 2.
LOF <- function(formula, data) {
ff <- lm(formula, data)
return(sum(residuals(ff)^2))
}
set.seed(360)
xvar <- rnorm(20,1,1)
yvar <- 1+2*xvar+rnorm(20,0,1)
dxy <- as.data.frame(cbind(xvar=xvar,yvar=yvar))
LOF(yvar~xvar,dxy)
## 3.
split_region <- function(R, v, t) {
r1_index <- (R$x[, v] <= t)
c1 <- c2 <- R$coords
c1[2, v] <- t; c2[1, v] <- t
Rl <- new_region(c1, R$x[r1_index, , drop=FALSE], R$y[r1_index])
Rr <- new_region(c2, R$x[!r1_index, , drop=FALSE], R$y[!r1_index])
return(list(Rl=Rl,Rr=Rr))
}
init <- new_node(new_region(x=x,y=y))
init
test <- recpart(x,y)
recpart(x,y)
rsive partitioning function.
#---------------------------------------------------#
# Recursive partitioning function.
recpart <- function(x,y){
init <- new_node(new_region(x=x,y=y))
tree <- recpart_recursive(init)
class(tree) <- c("tree",class(tree))
return(tree)
}
recpart_recursive <- function(node) {
R <- node$data
# stop recursion if region has a single data point
if(length(R$y) == 1) { return(node) } # NB: was return(NULL)
# else find a split that minimizes a LOF criterion
# Initialize
lof_best  <- Inf
# Loop over variables and splits
for(v in 1:ncol(R$x)){
tt <- split_points(R$x[,v]) # Exercise: write split_points()
for(t in tt) {
gdat <- data.frame(y=R$y,x=as.numeric(R$x[,v] <= t))
lof <- LOF(y~.,gdat) # Exercise: write LOF()
if(lof < lof_best) {
lof_best <- lof
childRs <- split(R,xvar=v,spt=t) # Exercises: write split.region()
}
}
}
# Call self on best split
node$childl <- recpart_recursive(new_node(childRs$Rl))
node$childr <- recpart_recursive(new_node(childRs$Rr))
return(node)
}
# Exercises
## 1.
split_points <- function(x) {
x <- sort(unique(x))
x <- x[-length(x)]
return(x)
}
testx <- c(2,4,2,3,7,7,5,5,8)
split_points(testx)
## 2.
LOF <- function(formula, data) {
ff <- lm(formula, data)
return(sum(residuals(ff)^2))
}
set.seed(360)
xvar <- rnorm(20,1,1)
yvar <- 1+2*xvar+rnorm(20,0,1)
dxy <- as.data.frame(cbind(xvar=xvar,yvar=yvar))
LOF(yvar~xvar,dxy)
## 3.
split_region <- function(R, v, t) {
r1_index <- (R$x[, v] <= t)
c1 <- c2 <- R$coords
c1[2, v] <- t; c2[1, v] <- t
Rl <- new_region(c1, R$x[r1_index, , drop=FALSE], R$y[r1_index])
Rr <- new_region(c2, R$x[!r1_index, , drop=FALSE], R$y[!r1_index])
return(list(Rl=Rl,Rr=Rr))
}
init <- new_node(new_region(x=x,y=y))
init
test <- recpart(x,y)
---
title: "Lecture 04 exercise solution"
knitr::opts_chunk$set(echo = TRUE)
f <- function() {
fe <- environment(f)
ee <- environment()
pe <- parent.env(ee)
list(fe=fe,ee=ee,pe=pe)
}
f()
f <- function(xx) {
xx_parent <- if(exists("xx",envir=environment(f))) {
get("xx",environment(f))
} else {
NULL
}
list(xx,xx_parent)
}
f(2)
xx <- 1
f(2)
rm(xx)
f <- function(xx) {
if(exists("xx",envir=environment(f))) {
xx_parent <- get("xx",envir=environment(f))
if(xx_parent != xx) {
warning("xx value in global env is ",xx_parent," and xx value in f is ",xx,"\n")
}
}
}
f(1)
xx <- 2
f(1)
rm(xx)
`%c%` <- function(x,y) c(x,y)
1:3 %c% 4:6
rfun <- function(seed,n) { set.seed(seed); return(rnorm(n))}
dat2 <- lapply(1:10,rfun,n=1e5) # apply rfun function with n=1e5 over 1:10
mfun2 <- function(x) {
return( data.frame(sum=sum(x),n=length(x)) ) }
sumdat <- lapply(dat2,mfun2) # apply mfun2 to each element of list "dat2"
simple_reduce <- function(x, f) { # Text section 9.5
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
allres <- simple_reduce(sumdat,rbind)
my_mean <- sum(allres[,"sum"])/sum(allres[,"n"]) # mean
mfun3 <- function(x,my_mean) {
return(data.frame(sum=sum((x-my_mean)^2),n=length(x)))
}
sumdat <- lapply(dat2,mfun3,my_mean=my_mean)
allres <- simple_reduce(sumdat,rbind)
my_var <- sum(allres[,"sum"])/(sum(allres[,"n"])-1)
var(unlist(dat2)) # same
# Constructor for the node data structure:
new_node <- function(data,childl=NULL,childr=NULL){
nn <- list(data=data,childl=childl,childr=childr) # note that input data is a list
class(nn) <- "node"
return(nn)
}
# The data stored in the node are a partition, or region of the
# covariate space. Constructor for region data structure:
new_region <- function(coords=NULL,x,y){
if(is.null(coords)) {
# find range for each column in x and column binding result
coords <- Reduce(cbind,lapply(x,range) )
}
out <- list(coords=coords,x=x,y=y)
class(out) <- "region"
return(out)
}
set.seed(123); n <- 10
x <- data.frame(x1=rnorm(n),x2=rnorm(n))
y <- rnorm(n)
new_region(x=x,y=y)
new_node(new_region(x=x,y=y))
new_node(new_region(x=x,y=y))$data
#---------------------------------------------------#
# Recursive partitioning function.
recpart <- function(x,y){
init <- new_node(new_region(x=x,y=y))
tree <- recpart_recursive(init)
class(tree) <- c("tree",class(tree))
return(tree)
}
recpart_recursive <- function(node) {
R <- node$data
# stop recursion if region has a single data point
if(length(R$y) == 1) { return(node) } # NB: was return(NULL)
# else find a split that minimizes a LOF criterion
# Initialize
lof_best  <- Inf
# Loop over variables and splits
for(v in 1:ncol(R$x)){
tt <- split_points(R$x[,v]) # Exercise: write split_points()
for(t in tt) {
gdat <- data.frame(y=R$y,x=as.numeric(R$x[,v] <= t))
lof <- LOF(y~.,gdat) # Exercise: write LOF()
if(lof < lof_best) {
lof_best <- lof
childRs <- split(R,xvar=v,spt=t) # Exercises: write split.region()
}
}
}
# Call self on best split
node$childl <- recpart_recursive(new_node(childRs$Rl))
node$childr <- recpart_recursive(new_node(childRs$Rr))
return(node)
}
split_points <- function(x) {
x <- sort(unique(x))
x <- x[-length(x)] # remove the last element which is the max in the list of unique values
return(x)
}
testx <- c(2,4,2,3,7,7,5,5,8) # 9 elements with 6 unique values
split_points(testx)
LOF <- function(form,data) {
ff <- lm(form,data)
return(sum(residuals(ff)^2))
}
set.seed(360)
xvar <- rnorm(20,1,1)
yvar <- 1+2*xvar+rnorm(20,0,1)
dxy <- as.data.frame(cbind(xvar=xvar,yvar=yvar))
LOF(yvar~xvar,dxy)
split.region <- function(R,xvar,spt){
r1_ind <- (R$x[,xvar] <= spt)
c1 <- c2 <- R$coords
c1[2,xvar] <- spt; c2[1,xvar] <- spt
Rl <- new_region(c1,R$x[r1_ind,,drop=FALSE],R$y[r1_ind])
Rr <- new_region(c2,R$x[!r1_ind,,drop=FALSE],R$y[!r1_ind])
return(list(Rl=Rl,Rr=Rr))
}
init <- new_node(new_region(x=x,y=y))
init
test <- recpart(x,y)
test$childl$childl$childr
test$childl$childl
plot(test$data$x)
dc = test$data$coords
rect(dc[1,1],dc[1,2],dc[2,1],dc[2,2],border="red")
dc = test$childl$childl$data$coords
rect(dc[1,1],dc[1,2],dc[2,1],dc[2,2],border="blue")
dc = test$childl$childr$data$coords
rect(dc[1,1],dc[1,2],dc[2,1],dc[2,2],border="green")
test <- recpart(x,y)
View(x)
# Short Exercises
## 3.
f <- function(xx) {
if(exists("xx", envir = environment(f))) {
xx_parent <- get("xx", envir = environment(f))
if(xx != xx_parent) {
warning("xx value in global environment is ", xx_parent, " and xx value in f is ", xx, "\n")
}
}
}
f(1)
xx <- 2
f(1)
## 4.
`%c%` <- function(x,y) c(x,y)
1:3 %c% 4:6
# Map Reduce
## 1.
rfun <- function(seed,n) { set.seed(seed); return(rnorm(n))}
dat2 <- lapply(1:10,rfun,n=1e5)
mfun2 <- function(x) { return(data.frame(sum=sum(x),n=length(x))) }
sumdat <- lapply(dat2,mfun2)
simple_reduce <- function(x, f) { # Text section 9.5
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
allres <- simple_reduce(sumdat,rbind)
my_mean <- sum(allres[,"sum"])/sum(allres[,"n"]) # mean
## 2.
ss <- function(x, my_mean) {
out <- data.frame(sum = sum((x - my_mean)^2), n = length(x))
return(out)
}
## 3.
lapply(dat2, ss, my_mean)
## 4.
allres <- simple_reduce(lapply(dat2, ss, my_mean),
rbind)
my_var <- sum(allres[,"sum"])/(sum(allres[,"n"])-1)
var(unlist(dat2)) # same
# Recursive Partitioning
## Constructor for the node data structure:
new_node <- function(data,childl=NULL,childr=NULL){
nn <- list(data=data,childl=childl,childr=childr)
class(nn) <- "node"
return(nn)
}
## The data stored in the node are a partition, or region of the
## covariate space. Constructor for region data structure:
new_region <- function(coords=NULL,x,y){
if(is.null(coords)) {
coords <- sapply(x,range) # find range of each column in x
}
out <- list(coords=coords,x=x,y=y)
class(out) <- "region"
return(out)
}
set.seed(123); n <- 10
x <- data.frame(x1=rnorm(n),x2=rnorm(n))
y <- rnorm(n)
new_region(x=x,y=y)
new_node(new_region(x=x,y=y))
#---------------------------------------------------#
# Recursive partitioning function.
recpart <- function(x,y){
init <- new_node(new_region(x=x,y=y))
tree <- recpart_recursive(init)
class(tree) <- c("tree",class(tree))
return(tree)
}
recpart_recursive <- function(node) {
R <- node$data
# stop recursion if region has a single data point
if(length(R$y) == 1) { return(node) } # NB: was return(NULL)
# else find a split that minimizes a LOF criterion
# Initialize
lof_best  <- Inf
# Loop over variables and splits
for(v in 1:ncol(R$x)){
tt <- split_points(R$x[,v]) # Exercise: write split_points()
for(t in tt) {
gdat <- data.frame(y=R$y,x=as.numeric(R$x[,v] <= t))
lof <- LOF(y~.,gdat) # Exercise: write LOF()
if(lof < lof_best) {
lof_best <- lof
childRs <- split(R,xvar=v,spt=t) # Exercises: write split.region()
}
}
}
# Call self on best split
node$childl <- recpart_recursive(new_node(childRs$Rl))
node$childr <- recpart_recursive(new_node(childRs$Rr))
return(node)
}
# Exercises
## 1.
split_points <- function(x) {
x <- sort(unique(x))
x <- x[-length(x)]
return(x)
}
testx <- c(2,4,2,3,7,7,5,5,8)
split_points(testx)
## 2.
LOF <- function(formula, data) {
ff <- lm(formula, data)
return(sum(residuals(ff)^2))
}
set.seed(360)
xvar <- rnorm(20,1,1)
yvar <- 1+2*xvar+rnorm(20,0,1)
dxy <- as.data.frame(cbind(xvar=xvar,yvar=yvar))
LOF(yvar~xvar,dxy)
## 3.
split_region <- function(R, v, t) {
r1_index <- (R$x[, v] <= t)
c1 <- c2 <- R$coords
c1[2, v] <- t; c2[1, v] <- t
Rl <- new_region(c1, R$x[r1_index, , drop=FALSE], R$y[r1_index])
Rr <- new_region(c2, R$x[!r1_index, , drop=FALSE], R$y[!r1_index])
return(list(Rl=Rl,Rr=Rr))
}
init <- new_node(new_region(x=x,y=y))
init
test <- recpart(x,y)
test$childl$childl$childr
test <- recpart(x,y)
test$childl$childl$childr
View(test)
plot(test$data$x)
dc = test$data$coords
rect(dc[1,1],dc[1,2],dc[2,1],dc[2,2],border="red")
?rect
plot(test$data$x)
dc = test$data$coords
test
View(test)
rect(dc[1,1],dc[1,2],dc[2,1],dc[2,2],border="red")
dc = test$childl$childl$data$coords
rect(dc[1,1],dc[1,2],dc[2,1],dc[2,2],border="blue")
dc = test$childl$childr$data$coords
rect(dc[1,1],dc[1,2],dc[2,1],dc[2,2],border="green")
dc
install.packages(c("bench", "profvis"))
f <- function(x) { g(h(x)) }
g <- function(x) {
x
}
h <- function(x) {
if(!is.numeric(x)) stop("x must be numeric")
}
#f("cat") # uncomment to run
#traceback()
#> f("cat")
#Error in h(x) : x must be numeric
#> traceback()
#4: stop("x must be numeric") at #2
#3: h(x) at #2
#2: g(h(x)) at #1
#1: f("cat")
h <- function(x) {
browser()
if(!is.numeric(x)) stop("x must be numeric")
}
#f("cat")
h <- function(x) {
if(!is.numeric(x)) stop("x must be numeric")
}
#debug(f)
#f("cat")
#undebug(f)
# debug(g)
# f("cat")
# undebug(g)
# debug(h)
# f("cat")
# undebug(h)
f <- function(x) { x + 3 }
# test
f(3) # should return 6
library(profvis) #visualize profiling data
library(bench) # benchmarking tools
f <- function() {pause(0.1);g();h()} # pause() is from profvis
g <- function() {pause(0.1);h()}
h <- function() {pause(0.1)}
Rprof()
f()
Rprof(NULL) # Now view Rprof.out
# summaryRprof() # uncomment and run
# profiler will refer to this source file
source("lec6profiling.R")
# Or choose Profile from RStudio
# profvis({ f() })
# profvis({ bigd1() })
# profvis({ bigd2() })
# profvis({ bigd3() })
library(bench)
x <- runif(100)
lb <- mark(
sqrt(x),
x ^ 0.5
)
lb
plot(lb,type="violin")
profvis({ bigd1() })
profvis({ bigd2() })
profvis({ bigd1() })
profvis({ bigd1() })
profvis({ bigd2() })
# profvis({ bigd3() })
```
profvis({ bigd1() })
profvis({ bigd2() })
profvis({ bigd3() })
View(bigd1)
x <- runif(100)
lb <- mark(
sqrt(x),
x ^ 0.5
)
lb
?mark
mark(
sqrt(x),
x ^ 0.5
)
mark(
sqrt(x),
x ^ 0.5
)
plot(lb,type="violin")
plot(lb,type="violin")
View(lb)
View(lb)
lb$time
plot(lb,type="violin")
